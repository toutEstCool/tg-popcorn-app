/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * DI.TapTap.Backend
 * OpenAPI spec version: 1.0
 */
import { createInstance } from "./api";
import type { BodyType } from "./api";
export interface UserReferralDto {
  fullName: string;
  scoreForReferral: number;
  userId: string;
  userName: string;
}

export interface UserListItem {
  fullName: string;
  gradeInfo: GradeInfoShort;
  id: string;
  score: number;
  userName: string;
}

export interface UserAchievementsListItem {
  readonly achieved?: boolean;
  /** @nullable */
  achievedOn: string | null;
  achievementId: number;
  /** @nullable */
  imageUrl: string | null;
  /** @nullable */
  nameEn: string | null;
  nameRu: string;
  scoreForAchievement: number;
}

export interface TestQuestionModel {
  allowMultipleAnswers: boolean;
  allowPartialCorrectCasesSelection: boolean;
  correctCasesNumbers: number[];
  /** @nullable */
  imagesUrls?: string[] | null;
  isRequired: boolean;
  number: number;
  question: string;
  testCases: TestCaseModel[];
}

export interface TestQuestionDto {
  allowMultipleAnswers: boolean;
  imagesUrls: string[];
  isRequired: boolean;
  question: string;
  testCases: TestCaseDto[];
}

export interface TestModel {
  description?: string;
  /** @nullable */
  lectureId?: number | null;
  /** @nullable */
  previewImageUrl?: string | null;
  questions?: TestQuestionModel[];
  scoreForAttempt?: number;
  title?: string;
}

export interface TestListItem {
  alreadyParticipated: boolean;
  description: string;
  /** @nullable */
  lectureId: number | null;
  /** @nullable */
  previewImageUrl: string | null;
  scoreForAttempt: number;
  testId: number;
  title: string;
}

export interface TestCaseModel {
  caseNumber: number;
  description: string;
  /** @nullable */
  imageUrl?: string | null;
  testCaseScore: number;
}

export interface TestCaseDto {
  caseNumber: number;
  description: string;
  /** @nullable */
  imageUrl?: string | null;
}

export interface TestAnswerDto {
  selectedCasesNumbers: number[];
  testQuestionNumber: number;
}

export interface TestAchievementResultDto {
  /** @nullable */
  descriptionEn: string | null;
  descriptionRu: string;
  /** @nullable */
  imageUrl: string | null;
  scoreForResult: number;
  /** @nullable */
  titleEn: string | null;
  titleRu: string;
}

export interface SubmitTestResponse {
  /**
   * @deprecated
   * @nullable
   */
  achievementReceivedId?: number | null;
  achievementResult?: TestAchievementResultDto;
  isSuccess?: boolean;
}

export interface SubmitTestCommand {
  answers?: TestAnswerDto[];
  testId?: number;
}

export interface StartGameResponse {
  betType: BetType;
  currencyFrom: string;
  currencyTo: string;
  /** @nullable */
  endedOn: string | null;
  id: number;
  /** @nullable */
  rateEnd: number | null;
  rateStart: number;
  startedOn: string;
}

export interface StartGameCommand {
  betType?: BetType;
}

export interface SignInTelegramCommand {
  initData?: string;
  /** @nullable */
  referralCode?: string | null;
}

export interface SignInCommand {
  password?: string;
  userName?: string;
}

export type RoleType = (typeof RoleType)[keyof typeof RoleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleType = {
  undefined: "undefined",
  user: "user",
  admin: "admin",
} as const;

export interface RoleDto {
  id?: string;
  type?: RoleType;
}

export interface RefreshTokenCommand {
  accessToken?: string;
  refreshToken?: string;
}

export interface LinkAchievementWithTestCommand {
  achievementId?: number;
  /** @nullable */
  descriptionEn?: string | null;
  descriptionRu?: string;
  /** @nullable */
  imageClaimedUrl?: string | null;
  /** @nullable */
  imageResultUrl?: string | null;
  /** @nullable */
  imageUnclaimedUrl?: string | null;
  isTestScoreFromInclusive?: boolean;
  isTestScoreToInclusive?: boolean;
  /** @nullable */
  nameEn?: string | null;
  nameRu?: string;
  /** @nullable */
  requiredActionEn?: string | null;
  requiredActionRu?: string;
  testId?: number;
  testScoreFrom?: number;
  testScoreTo?: number;
}

export interface LectureListItem {
  /** @nullable */
  author: string | null;
  id: number;
  title: string;
}

export interface ImportTestCommand {
  test?: TestModel;
}

export interface GradeLevelInfoDto {
  grade: string;
  level: number;
  scoreFromInclusive: number;
  scoreToExclusive: number;
}

export interface GradeInfoShort {
  grade?: string;
  level?: number;
}

export interface GradeInfo {
  grade: string;
  level: number;
  progressPercents: number;
  scoreFromInclusive: number;
  scoreToExclusive: number;
}

export interface GetUsersListResponse {
  items?: UserListItem[];
  totalCount?: number;
}

export interface GetUsersListQuery {
  /** @nullable */
  fullNameTerm?: string | null;
  skip?: number;
  take?: number;
  /** @nullable */
  userNameTerm?: string | null;
}

export interface GetUserReferralsResponse {
  items: UserReferralDto[];
  totalCount: number;
}

export interface GetUserReferralsQuery {
  skip?: number;
  take?: number;
  /** @nullable */
  userId?: string | null;
}

export interface GetUserProfileResponse {
  accountName: string;
  fullName: string;
  gradeInfo: GradeInfo;
  id: string;
  score: number;
}

export interface GetUserProfileQuery {
  userId?: string;
}

export interface GetUserInfoResponse {
  accountName: string;
  /** @nullable */
  birthDate: string | null;
  fullName: string;
  id: string;
  /** @nullable */
  referrerId: string | null;
  registeredOn: string;
  roles: RoleDto[];
}

export interface GetUserInfoQuery {
  userId?: string;
}

export interface GetUserAchievementsListResponse {
  items: UserAchievementsListItem[];
  totalCount: number;
}

export interface GetUserAchievementsListQuery {
  skip?: number;
  take?: number;
  /** @nullable */
  userId?: string | null;
}

export interface GetUserAchievementInfoResponse {
  achieved: boolean;
  /** @nullable */
  achievedOn: string | null;
  achievementId: number;
  currentProgress: number;
  /** @nullable */
  descriptionEn: string | null;
  descriptionRu: string;
  /** @nullable */
  imageUrl: string | null;
  /** @nullable */
  nameEn: string | null;
  nameRu: string;
  /** @nullable */
  requiredActionEn: string | null;
  requiredActionRu: string;
  requiredProgress: number;
  scoreForAchievement: number;
}

export interface GetUserAchievementInfoQuery {
  achievementId?: number;
  /** @nullable */
  userId?: string | null;
}

export interface GetTestsListResponse {
  items: TestListItem[];
  totalCount: number;
}

export interface GetTestsListQuery {
  skip?: number;
  take?: number;
}

export interface GetTestInfoResponse {
  alreadyParticipated: boolean;
  description: string;
  /** @nullable */
  lectureId: number | null;
  /** @nullable */
  previewImageUrl: string | null;
  questions: TestQuestionDto[];
  scoreForAttempt: number;
  testId: number;
  title: string;
}

export interface GetTestInfoQuery {
  testId?: number;
}

export interface GetLecturesListResponse {
  items: LectureListItem[];
  totalCount: number;
}

export interface GetLecturesListQuery {
  skip?: number;
  take?: number;
}

export interface GetLectureInfoResponse {
  /** @nullable */
  author: string | null;
  createdOn: string;
  id: number;
  /** @nullable */
  testId: number | null;
  text: string;
  title: string;
}

export interface GetLectureInfoQuery {
  lectureId?: number;
}

export interface GetGradesLevelsResponse {
  grades: GradeLevelInfoDto[];
}

export interface GetGamesListResponse {
  items: GamesListItem[];
  totalCount: number;
}

export interface GetGamesListQuery {
  skip?: number;
  take?: number;
  /** @nullable */
  userId?: string | null;
}

export interface GetGameExchangeRateResponse {
  currencyFrom?: string;
  currencyTo?: string;
  exchangeRate?: number;
}

export interface GetCurrentUserResponse {
  id: string;
  name: string;
  roles: RoleType[];
}

export interface GetCurrentGameResponse {
  game?: GameInfo;
  isStarted?: boolean;
}

export interface GetAchievementsStatisticListResponse {
  items: AchievementsStatisticListItem[];
  totalCount: number;
}

export interface GetAchievementsStatisticListQuery {
  skip?: number;
  take?: number;
}

export interface GenerateAndGetReferralCodeResponse {
  referralCode: string;
}

export interface GenerateAndGetReferralCodeCommand {
  userId?: string;
}

export interface GamesListItem {
  betType: BetType;
  currencyFrom: string;
  currencyTo: string;
  endedOn: string;
  gameId: number;
  isWin: boolean;
}

export interface GameInfo {
  betType: BetType;
  currencyFrom: string;
  currencyTo: string;
  /** @nullable */
  endedOn: string | null;
  id: number;
  /** @nullable */
  rateEnd: number | null;
  rateStart: number;
  startedOn: string;
}

export interface FinishGameCommand {
  gameId?: number;
}

export type BetType = (typeof BetType)[keyof typeof BetType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BetType = {
  long: "long",
  short: "short",
} as const;

export interface AuthResponse {
  accessToken?: string;
  refreshToken?: string;
}

export interface AchievementsStatisticListItem {
  achievementId: number;
  /** @nullable */
  descriptionEn: string | null;
  descriptionRu: string;
  /** @nullable */
  imageUrl: string | null;
  /** @nullable */
  nameEn: string | null;
  nameRu: string;
  scoreForAchievement: number;
  usersAchieved: number;
  usersPartiallyAchieved: number;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const postApiAchievementsGetUserAchievementsList = (
  getUserAchievementsListQuery: BodyType<GetUserAchievementsListQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetUserAchievementsListResponse>(
    {
      url: `/api/Achievements/getUserAchievementsList`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getUserAchievementsListQuery,
    },
    options,
  );
};

export const postApiAchievementsGetAchievementsStatisticList = (
  getAchievementsStatisticListQuery: BodyType<GetAchievementsStatisticListQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetAchievementsStatisticListResponse>(
    {
      url: `/api/Achievements/getAchievementsStatisticList`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getAchievementsStatisticListQuery,
    },
    options,
  );
};

export const postApiAchievementsGetUserAchievementInfo = (
  getUserAchievementInfoQuery: BodyType<GetUserAchievementInfoQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetUserAchievementInfoResponse>(
    {
      url: `/api/Achievements/getUserAchievementInfo`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getUserAchievementInfoQuery,
    },
    options,
  );
};

export const postApiAchievementsLinkWithTest = (
  linkAchievementWithTestCommand: BodyType<LinkAchievementWithTestCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/api/Achievements/linkWithTest`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: linkAchievementWithTestCommand,
    },
    options,
  );
};

export const postApiAuthSignIn = (
  signInCommand: BodyType<SignInCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AuthResponse>(
    {
      url: `/api/Auth/signIn`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInCommand,
    },
    options,
  );
};

export const postApiAuthSignInTelegram = (
  signInTelegramCommand: BodyType<SignInTelegramCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AuthResponse>(
    {
      url: `/api/Auth/signInTelegram`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInTelegramCommand,
    },
    options,
  );
};

export const getApiAuthGetCurrentUser = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetCurrentUserResponse>(
    { url: `/api/Auth/getCurrentUser`, method: "GET" },
    options,
  );
};

export const postApiAuthRefreshToken = (
  refreshTokenCommand: BodyType<RefreshTokenCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AuthResponse>(
    {
      url: `/api/Auth/refreshToken`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: refreshTokenCommand,
    },
    options,
  );
};

export const postApiGamesStartGame = (
  startGameCommand: BodyType<StartGameCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<StartGameResponse>(
    {
      url: `/api/Games/startGame`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: startGameCommand,
    },
    options,
  );
};

export const getApiGamesGetCurrentGame = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetCurrentGameResponse>(
    { url: `/api/Games/getCurrentGame`, method: "GET" },
    options,
  );
};

export const getApiGamesGetGameExchangeRate = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetGameExchangeRateResponse>(
    { url: `/api/Games/getGameExchangeRate`, method: "GET" },
    options,
  );
};

export const postApiGamesGetGamesList = (
  getGamesListQuery: BodyType<GetGamesListQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetGamesListResponse>(
    {
      url: `/api/Games/getGamesList`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getGamesListQuery,
    },
    options,
  );
};

export const postApiGamesTestSchedule = (
  postApiGamesTestScheduleBody: BodyType<string>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/api/Games/testSchedule`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postApiGamesTestScheduleBody,
    },
    options,
  );
};

export const postApiGamesFinishGame = (
  finishGameCommand: BodyType<FinishGameCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/api/Games/finishGame`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: finishGameCommand,
    },
    options,
  );
};

export const postApiGradesGetGradesLevels = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetGradesLevelsResponse>(
    { url: `/api/Grades/getGradesLevels`, method: "POST" },
    options,
  );
};

export const postApiImportImportTest = (
  importTestCommand: BodyType<ImportTestCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/api/Import/importTest`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: importTestCommand,
    },
    options,
  );
};

export const postApiLecturesGetLecturesList = (
  getLecturesListQuery: BodyType<GetLecturesListQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetLecturesListResponse>(
    {
      url: `/api/Lectures/getLecturesList`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getLecturesListQuery,
    },
    options,
  );
};

export const postApiLecturesGetLectureInfo = (
  getLectureInfoQuery: BodyType<GetLectureInfoQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetLectureInfoResponse>(
    {
      url: `/api/Lectures/getLectureInfo`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getLectureInfoQuery,
    },
    options,
  );
};

export const postApiTestsGetTestsList = (
  getTestsListQuery: BodyType<GetTestsListQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetTestsListResponse>(
    {
      url: `/api/Tests/getTestsList`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getTestsListQuery,
    },
    options,
  );
};

export const postApiTestsGetTestInfo = (
  getTestInfoQuery: BodyType<GetTestInfoQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetTestInfoResponse>(
    {
      url: `/api/Tests/getTestInfo`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getTestInfoQuery,
    },
    options,
  );
};

export const postApiTestsSubmitTest = (
  submitTestCommand: BodyType<SubmitTestCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SubmitTestResponse>(
    {
      url: `/api/Tests/submitTest`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: submitTestCommand,
    },
    options,
  );
};

export const postApiUsersGetUserInfo = (
  getUserInfoQuery: BodyType<GetUserInfoQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetUserInfoResponse>(
    {
      url: `/api/Users/getUserInfo`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getUserInfoQuery,
    },
    options,
  );
};

export const postApiUsersGetUserProfile = (
  getUserProfileQuery: BodyType<GetUserProfileQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetUserProfileResponse>(
    {
      url: `/api/Users/getUserProfile`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getUserProfileQuery,
    },
    options,
  );
};

export const postApiUsersGenerateAndGetReferralCode = (
  generateAndGetReferralCodeCommand: BodyType<GenerateAndGetReferralCodeCommand>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GenerateAndGetReferralCodeResponse>(
    {
      url: `/api/Users/generateAndGetReferralCode`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: generateAndGetReferralCodeCommand,
    },
    options,
  );
};

export const postApiUsersGetUserReferrals = (
  getUserReferralsQuery: BodyType<GetUserReferralsQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetUserReferralsResponse>(
    {
      url: `/api/Users/getUserReferrals`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getUserReferralsQuery,
    },
    options,
  );
};

export const postApiUsersGetUsersList = (
  getUsersListQuery: BodyType<GetUsersListQuery>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetUsersListResponse>(
    {
      url: `/api/Users/getUsersList`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: getUsersListQuery,
    },
    options,
  );
};

export type PostApiAchievementsGetUserAchievementsListResult = NonNullable<
  Awaited<ReturnType<typeof postApiAchievementsGetUserAchievementsList>>
>;
export type PostApiAchievementsGetAchievementsStatisticListResult = NonNullable<
  Awaited<ReturnType<typeof postApiAchievementsGetAchievementsStatisticList>>
>;
export type PostApiAchievementsGetUserAchievementInfoResult = NonNullable<
  Awaited<ReturnType<typeof postApiAchievementsGetUserAchievementInfo>>
>;
export type PostApiAchievementsLinkWithTestResult = NonNullable<
  Awaited<ReturnType<typeof postApiAchievementsLinkWithTest>>
>;
export type PostApiAuthSignInResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthSignIn>>
>;
export type PostApiAuthSignInTelegramResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthSignInTelegram>>
>;
export type GetApiAuthGetCurrentUserResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthGetCurrentUser>>
>;
export type PostApiAuthRefreshTokenResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthRefreshToken>>
>;
export type PostApiGamesStartGameResult = NonNullable<
  Awaited<ReturnType<typeof postApiGamesStartGame>>
>;
export type GetApiGamesGetCurrentGameResult = NonNullable<
  Awaited<ReturnType<typeof getApiGamesGetCurrentGame>>
>;
export type GetApiGamesGetGameExchangeRateResult = NonNullable<
  Awaited<ReturnType<typeof getApiGamesGetGameExchangeRate>>
>;
export type PostApiGamesGetGamesListResult = NonNullable<
  Awaited<ReturnType<typeof postApiGamesGetGamesList>>
>;
export type PostApiGamesTestScheduleResult = NonNullable<
  Awaited<ReturnType<typeof postApiGamesTestSchedule>>
>;
export type PostApiGamesFinishGameResult = NonNullable<
  Awaited<ReturnType<typeof postApiGamesFinishGame>>
>;
export type PostApiGradesGetGradesLevelsResult = NonNullable<
  Awaited<ReturnType<typeof postApiGradesGetGradesLevels>>
>;
export type PostApiImportImportTestResult = NonNullable<
  Awaited<ReturnType<typeof postApiImportImportTest>>
>;
export type PostApiLecturesGetLecturesListResult = NonNullable<
  Awaited<ReturnType<typeof postApiLecturesGetLecturesList>>
>;
export type PostApiLecturesGetLectureInfoResult = NonNullable<
  Awaited<ReturnType<typeof postApiLecturesGetLectureInfo>>
>;
export type PostApiTestsGetTestsListResult = NonNullable<
  Awaited<ReturnType<typeof postApiTestsGetTestsList>>
>;
export type PostApiTestsGetTestInfoResult = NonNullable<
  Awaited<ReturnType<typeof postApiTestsGetTestInfo>>
>;
export type PostApiTestsSubmitTestResult = NonNullable<
  Awaited<ReturnType<typeof postApiTestsSubmitTest>>
>;
export type PostApiUsersGetUserInfoResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersGetUserInfo>>
>;
export type PostApiUsersGetUserProfileResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersGetUserProfile>>
>;
export type PostApiUsersGenerateAndGetReferralCodeResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersGenerateAndGetReferralCode>>
>;
export type PostApiUsersGetUserReferralsResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersGetUserReferrals>>
>;
export type PostApiUsersGetUsersListResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersGetUsersList>>
>;
